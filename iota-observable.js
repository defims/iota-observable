// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  define(function(require) {
    var Observable;
    return Observable = (function() {

      function Observable(observedObject) {
        this.observedObject = observedObject;
        this.observers = {};
      }

      Observable.prototype.set = function() {
        var args, key, properties, value, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length === 1) {
          properties = args[0];
          _results = [];
          for (key in properties) {
            value = properties[key];
            _results.push(this._internalSet(key, value));
          }
          return _results;
        } else {
          return this._internalSet(args[0], args[1]);
        }
      };

      Observable.prototype.get = function(key) {
        return this.observedObject[key];
      };

      Observable.prototype.invalidate = function(key) {
        var callback, observers, _i, _len, _results;
        observers = this.observers[key];
        if (observers != null) {
          _results = [];
          for (_i = 0, _len = observers.length; _i < _len; _i++) {
            callback = observers[_i];
            _results.push(callback());
          }
          return _results;
        }
      };

      Observable.prototype.on = function(key, callback) {
        var _base, _ref;
        if ((_ref = (_base = this.observers)[key]) == null) {
          _base[key] = [];
        }
        return this.observers[key].push(callback);
      };

      Observable.prototype.off = function(key, callback) {
        return delete this.observers[key];
      };

      Observable.prototype._internalSet = function(key, value) {
        this.observedObject[key] = value;
        return this.invalidate(key);
      };

      return Observable;

    })();
  });

}).call(this);
